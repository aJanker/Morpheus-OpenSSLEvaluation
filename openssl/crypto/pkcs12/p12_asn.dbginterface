fm True
features (0)
	
imports (4)
	ASN1_item_d2i: (struct ASN1_VALUE_st**, const unsigned char**, signed long, const struct ASN1_ITEM_st*) => struct ASN1_VALUE_st* 		if True		at file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:858:160, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:858:160, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:858:160, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:858:160
	ASN1_item_free: (struct ASN1_VALUE_st*, const struct ASN1_ITEM_st*) => void 		if True		at file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:844:194, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:844:194, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:844:194, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:844:194
	ASN1_item_i2d: (struct ASN1_VALUE_st*, unsigned char**, const struct ASN1_ITEM_st*) => signed int 		if True		at file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:858:289, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:858:289, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:858:289, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:858:289
	ASN1_item_new: (const struct ASN1_ITEM_st*) => struct ASN1_VALUE_st* 		if True		at file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:844:117, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:844:117, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:844:117, file /local/janker/paper/cRefactor-OpenSSLEvaluation/openssl/include/openssl/asn1t.h:844:117
exports (16)
	PKCS12_BAGS_free: (struct pkcs12_bag_st*) => void 		if True		at string literal: PKCS12_BAGS_free:1:0
	PKCS12_BAGS_new: () => struct pkcs12_bag_st* 		if True		at string literal: PKCS12_BAGS_new:1:0
	PKCS12_MAC_DATA_free: (struct {Map(dinfo -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(dinfo),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), salt -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(salt),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), iter -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(iter),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))))}*) => void 		if True		at string literal: PKCS12_MAC_DATA_free:1:0
	PKCS12_MAC_DATA_new: () => struct {Map(dinfo -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(dinfo),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), salt -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(salt),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), iter -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(iter),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))))}* 		if True		at string literal: PKCS12_MAC_DATA_new:1:0
	PKCS12_SAFEBAG_free: (struct {Map(type -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(type),List()),One(CType(CPointer(CStruct(asn1_object_st,false)),false,false,false))))), value -> List((True,(AtomicNamedDeclarator(List(),Id(value),List()),One(CType(CAnonymousStruct(Map(keybag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(keybag),List()),One(CType(CPointer(CStruct(pkcs8_priv_key_info_st,false)),false,false,false))))), bag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(bag),List()),One(CType(CPointer(CStruct(pkcs12_bag_st,false)),false,false,false))))), safes -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(safes),List()),One(CType(CPointer(CStruct(stack_st_PKCS12_SAFEBAG,false)),false,false,false))))), shkeybag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(shkeybag),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), other -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(other),List()),One(CType(CPointer(CStruct(asn1_type_st,false)),false,false,false)))))),true),false,false,false))))), attrib -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(attrib),List()),One(CType(CPointer(CStruct(stack_st_X509_ATTRIBUTE,false)),false,false,false))))))}*) => void 		if True		at string literal: PKCS12_SAFEBAG_free:1:0
	PKCS12_SAFEBAG_new: () => struct {Map(type -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(type),List()),One(CType(CPointer(CStruct(asn1_object_st,false)),false,false,false))))), value -> List((True,(AtomicNamedDeclarator(List(),Id(value),List()),One(CType(CAnonymousStruct(Map(keybag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(keybag),List()),One(CType(CPointer(CStruct(pkcs8_priv_key_info_st,false)),false,false,false))))), bag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(bag),List()),One(CType(CPointer(CStruct(pkcs12_bag_st,false)),false,false,false))))), safes -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(safes),List()),One(CType(CPointer(CStruct(stack_st_PKCS12_SAFEBAG,false)),false,false,false))))), shkeybag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(shkeybag),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), other -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(other),List()),One(CType(CPointer(CStruct(asn1_type_st,false)),false,false,false)))))),true),false,false,false))))), attrib -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(attrib),List()),One(CType(CPointer(CStruct(stack_st_X509_ATTRIBUTE,false)),false,false,false))))))}* 		if True		at string literal: PKCS12_SAFEBAG_new:1:0
	PKCS12_free: (struct {Map(version -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(version),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), mac -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(mac),List()),One(CType(CPointer(CAnonymousStruct(Map(dinfo -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(dinfo),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), salt -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(salt),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), iter -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(iter),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false)))))),false)),false,false,false))))), authsafes -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(authsafes),List()),One(CType(CPointer(CStruct(pkcs7_st,false)),false,false,false))))))}*) => void 		if True		at string literal: PKCS12_free:1:0
	PKCS12_new: () => struct {Map(version -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(version),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), mac -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(mac),List()),One(CType(CPointer(CAnonymousStruct(Map(dinfo -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(dinfo),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), salt -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(salt),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), iter -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(iter),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false)))))),false)),false,false,false))))), authsafes -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(authsafes),List()),One(CType(CPointer(CStruct(pkcs7_st,false)),false,false,false))))))}* 		if True		at string literal: PKCS12_new:1:0
	d2i_PKCS12: (struct {Map(version -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(version),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), mac -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(mac),List()),One(CType(CPointer(CAnonymousStruct(Map(dinfo -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(dinfo),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), salt -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(salt),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), iter -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(iter),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false)))))),false)),false,false,false))))), authsafes -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(authsafes),List()),One(CType(CPointer(CStruct(pkcs7_st,false)),false,false,false))))))}**, const unsigned char**, signed long) => struct {Map(version -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(version),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), mac -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(mac),List()),One(CType(CPointer(CAnonymousStruct(Map(dinfo -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(dinfo),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), salt -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(salt),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), iter -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(iter),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false)))))),false)),false,false,false))))), authsafes -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(authsafes),List()),One(CType(CPointer(CStruct(pkcs7_st,false)),false,false,false))))))}* 		if True		at string literal: d2i_PKCS12:1:0
	d2i_PKCS12_BAGS: (struct pkcs12_bag_st**, const unsigned char**, signed long) => struct pkcs12_bag_st* 		if True		at string literal: d2i_PKCS12_BAGS:1:0
	d2i_PKCS12_MAC_DATA: (struct {Map(dinfo -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(dinfo),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), salt -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(salt),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), iter -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(iter),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))))}**, const unsigned char**, signed long) => struct {Map(dinfo -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(dinfo),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), salt -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(salt),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), iter -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(iter),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))))}* 		if True		at string literal: d2i_PKCS12_MAC_DATA:1:0
	d2i_PKCS12_SAFEBAG: (struct {Map(type -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(type),List()),One(CType(CPointer(CStruct(asn1_object_st,false)),false,false,false))))), value -> List((True,(AtomicNamedDeclarator(List(),Id(value),List()),One(CType(CAnonymousStruct(Map(keybag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(keybag),List()),One(CType(CPointer(CStruct(pkcs8_priv_key_info_st,false)),false,false,false))))), bag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(bag),List()),One(CType(CPointer(CStruct(pkcs12_bag_st,false)),false,false,false))))), safes -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(safes),List()),One(CType(CPointer(CStruct(stack_st_PKCS12_SAFEBAG,false)),false,false,false))))), shkeybag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(shkeybag),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), other -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(other),List()),One(CType(CPointer(CStruct(asn1_type_st,false)),false,false,false)))))),true),false,false,false))))), attrib -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(attrib),List()),One(CType(CPointer(CStruct(stack_st_X509_ATTRIBUTE,false)),false,false,false))))))}**, const unsigned char**, signed long) => struct {Map(type -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(type),List()),One(CType(CPointer(CStruct(asn1_object_st,false)),false,false,false))))), value -> List((True,(AtomicNamedDeclarator(List(),Id(value),List()),One(CType(CAnonymousStruct(Map(keybag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(keybag),List()),One(CType(CPointer(CStruct(pkcs8_priv_key_info_st,false)),false,false,false))))), bag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(bag),List()),One(CType(CPointer(CStruct(pkcs12_bag_st,false)),false,false,false))))), safes -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(safes),List()),One(CType(CPointer(CStruct(stack_st_PKCS12_SAFEBAG,false)),false,false,false))))), shkeybag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(shkeybag),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), other -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(other),List()),One(CType(CPointer(CStruct(asn1_type_st,false)),false,false,false)))))),true),false,false,false))))), attrib -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(attrib),List()),One(CType(CPointer(CStruct(stack_st_X509_ATTRIBUTE,false)),false,false,false))))))}* 		if True		at string literal: d2i_PKCS12_SAFEBAG:1:0
	i2d_PKCS12: (struct {Map(version -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(version),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), mac -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(mac),List()),One(CType(CPointer(CAnonymousStruct(Map(dinfo -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(dinfo),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), salt -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(salt),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), iter -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(iter),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false)))))),false)),false,false,false))))), authsafes -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(authsafes),List()),One(CType(CPointer(CStruct(pkcs7_st,false)),false,false,false))))))}*, unsigned char**) => signed int 		if True		at string literal: i2d_PKCS12:1:0
	i2d_PKCS12_BAGS: (struct pkcs12_bag_st*, unsigned char**) => signed int 		if True		at string literal: i2d_PKCS12_BAGS:1:0
	i2d_PKCS12_MAC_DATA: (struct {Map(dinfo -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(dinfo),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), salt -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(salt),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))), iter -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(iter),List()),One(CType(CPointer(CStruct(asn1_string_st,false)),false,false,false))))))}*, unsigned char**) => signed int 		if True		at string literal: i2d_PKCS12_MAC_DATA:1:0
	i2d_PKCS12_SAFEBAG: (struct {Map(type -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(type),List()),One(CType(CPointer(CStruct(asn1_object_st,false)),false,false,false))))), value -> List((True,(AtomicNamedDeclarator(List(),Id(value),List()),One(CType(CAnonymousStruct(Map(keybag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(keybag),List()),One(CType(CPointer(CStruct(pkcs8_priv_key_info_st,false)),false,false,false))))), bag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(bag),List()),One(CType(CPointer(CStruct(pkcs12_bag_st,false)),false,false,false))))), safes -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(safes),List()),One(CType(CPointer(CStruct(stack_st_PKCS12_SAFEBAG,false)),false,false,false))))), shkeybag -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(shkeybag),List()),One(CType(CPointer(CStruct(X509_sig_st,false)),false,false,false))))), other -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(other),List()),One(CType(CPointer(CStruct(asn1_type_st,false)),false,false,false)))))),true),false,false,false))))), attrib -> List((True,(AtomicNamedDeclarator(List(Opt(True,Pointer(List()))),Id(attrib),List()),One(CType(CPointer(CStruct(stack_st_X509_ATTRIBUTE,false)),false,false,false))))))}*, unsigned char**) => signed int 		if True		at string literal: i2d_PKCS12_SAFEBAG:1:0
